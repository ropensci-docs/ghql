[{"path":[]},{"path":"https://docs.ropensci.org/ghql/CONTRIBUTING.html","id":"bugs","dir":"","previous_headings":"","what":"Bugs?","title":"CONTRIBUTING","text":"Submit issue Issues page","code":""},{"path":"https://docs.ropensci.org/ghql/CONTRIBUTING.html","id":"code-contributions","dir":"","previous_headings":"","what":"Code contributions","title":"CONTRIBUTING","text":"Fork repo Github account Clone version account machine account, e.g,. git clone https://github.com/<yourgithubusername>/ghql.git Make sure track progress upstream (.e., version ghql ropensci/ghql) git remote add upstream https://github.com/ropensci/ghql.git. making changes make sure pull changes upstream either git fetch upstream merge later git pull upstream fetch merge one step Make changes (bonus points making changes new feature branch) Push account Submit pull request home base ropensci/ghql","code":""},{"path":[]},{"path":"https://docs.ropensci.org/ghql/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 ghql authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://docs.ropensci.org/ghql/articles/ghql.html","id":"github-authentication","dir":"Articles","previous_headings":"","what":"GitHub Authentication","title":"Introduction to ghql","text":"Note: clear, R package isn’t just GitHub GraphQL API, public GraphQL API can think , used examples throughout . See https://docs.github.com/en/graphql/guides/forming-calls--graphql#authenticating--graphql getting OAuth token. Store token env var called GITHUB_TOKEN","code":""},{"path":"https://docs.ropensci.org/ghql/articles/ghql.html","id":"install","dir":"Articles","previous_headings":"","what":"Install","title":"Introduction to ghql","text":"CRAN version Development version","code":"install.packages(\"ghql\") remotes::install_github(\"ropensci/ghql\") library(\"ghql\") library(\"jsonlite\") library(\"dplyr\")"},{"path":"https://docs.ropensci.org/ghql/articles/ghql.html","id":"initialize-client","dir":"Articles","previous_headings":"","what":"initialize client","title":"Introduction to ghql","text":"","code":"token <- Sys.getenv(\"GITHUB_TOKEN\") con <- GraphqlClient$new(   url = \"https://api.github.com/graphql\",   headers = list(Authorization = paste0(\"Bearer \", token)) )"},{"path":"https://docs.ropensci.org/ghql/articles/ghql.html","id":"load-schema","dir":"Articles","previous_headings":"","what":"load schema","title":"Introduction to ghql","text":"Since every GraphQL server schema base URL, manually load schema case","code":"con$load_schema()"},{"path":"https://docs.ropensci.org/ghql/articles/ghql.html","id":"queries","dir":"Articles","previous_headings":"","what":"Queries","title":"Introduction to ghql","text":"Make Query class object construct queries check properly formatted using [graphql][] package leverages [libgraphqlparser][] C++ parser. query malformed, return message query malformed. Get stargazer counts","code":"qry <- Query$new() qry$query('mydata', '{   repositoryOwner(login:\"sckott\") {     repositories(first: 5, orderBy: {field:PUSHED_AT,direction:DESC}, isFork:false) {       edges {         node {           name           stargazers {             totalCount           }         }       }     }   } }') qry #> <ghql: query> #>   queries: #>     mydata qry$queries$mydata #>   #>  { #>   repositoryOwner(login:\"sckott\") { #>     repositories(first: 5, orderBy: {field:PUSHED_AT,direction:DESC}, isFork:false) { #>       edges { #>         node { #>           name #>           stargazers { #>             totalCount #>           } #>         } #>       } #>     } #>   } #> } # returns json (x <- con$exec(qry$queries$mydata)) #> [1] \"{\\\"data\\\":{\\\"repositoryOwner\\\":{\\\"repositories\\\":{\\\"edges\\\":[{\\\"node\\\":{\\\"name\\\":\\\"cranchecksdocs\\\",\\\"stargazers\\\":{\\\"totalCount\\\":6}}},{\\\"node\\\":{\\\"name\\\":\\\"badges\\\",\\\"stargazers\\\":{\\\"totalCount\\\":0}}},{\\\"node\\\":{\\\"name\\\":\\\"mutant-proposal\\\",\\\"stargazers\\\":{\\\"totalCount\\\":0}}},{\\\"node\\\":{\\\"name\\\":\\\"extcite\\\",\\\"stargazers\\\":{\\\"totalCount\\\":6}}},{\\\"node\\\":{\\\"name\\\":\\\"Headstart\\\",\\\"stargazers\\\":{\\\"totalCount\\\":140}}}]}}}}\\n\" # parse to an R list jsonlite::fromJSON(x) #> $data #> $data$repositoryOwner #> $data$repositoryOwner$repositories #> $data$repositoryOwner$repositories$edges #>         node.name node.totalCount #> 1  cranchecksdocs               6 #> 2          badges               0 #> 3 mutant-proposal               0 #> 4         extcite               6 #> 5       Headstart             140"},{"path":"https://docs.ropensci.org/ghql/articles/ghql.html","id":"parameterize-a-query-by-a-variable","dir":"Articles","previous_headings":"","what":"Parameterize a query by a variable","title":"Introduction to ghql","text":"Define query Define variable named list Creat clint make request, passing query variables","code":"qry <- Query$new() qry$query('getgeninfo', 'query getGeneInfo($genId: String!){   geneInfo(geneId: $genId) {     id     symbol     chromosome     start     end     bioType     __typename   } }') variables <- list(genId = 'ENSG00000137033') con <- GraphqlClient$new('https://genetics-api.opentargets.io/graphql') res <- con$exec(qry$queries$getgeninfo, variables) jsonlite::fromJSON(res) #> $data #> $data$geneInfo #> $data$geneInfo$id #> [1] \"ENSG00000137033\" #>  #> $data$geneInfo$symbol #> [1] \"IL33\" #>  #> $data$geneInfo$chromosome #> [1] \"9\" #>  #> $data$geneInfo$start #> [1] 6215786 #>  #> $data$geneInfo$end #> [1] 6257983 #>  #> $data$geneInfo$bioType #> [1] \"protein_coding\" #>  #> $data$geneInfo$`__typename` #> [1] \"Gene\""},{"path":"https://docs.ropensci.org/ghql/articles/ghql.html","id":"example-datacite","dir":"Articles","previous_headings":"","what":"Example: Datacite","title":"Introduction to ghql","text":"Datacite provides DOIs research data. Check Datacite GraphQL docs get started. minimal example:","code":"con <- GraphqlClient$new(\"https://api.datacite.org/graphql\") qry <- Query$new() qry$query('dc', '{   publications(query: \"climate\") {     totalCount      nodes {       id       titles {         title       }       descriptions {         description       }       creators {         name         familyName       }       fundingReferences {         funderIdentifier         funderName         awardTitle         awardNumber       }     }   } }') res <- con$exec(qry$queries$dc) head(jsonlite::fromJSON(res)$data$publications$nodes) #>                                     id                                titles #> 1 https://doi.org/10.4122/1.1000000046 Single Cell Protein from Landfill Gas #> 2 https://doi.org/10.4122/1.1000000046 Single Cell Protein from Landfill Gas #> 3 https://doi.org/10.4122/1.1000000047 Single Cell Protein from Landfill Gas #> 4 https://doi.org/10.4122/1.1000000047 Single Cell Protein from Landfill Gas #> 5 https://doi.org/10.4122/1.1000000048 Single Cell Protein from Landfill Gas #> 6 https://doi.org/10.4122/1.1000000048 Single Cell Protein from Landfill Gasdescriptions #> 1 Municipal solid waste (MSW) landfills are one of the largest human-generated sources of methane emissions in the United States and other countries globally. Methane is believed to be a very potent greenhouse gas that is a key contributor to global climate change, over 21 times stronger than CO2. Methane also has a short (10-year) atmospheric life. Because methane is both potent and short-lived, reducing methane emissions from MSW landfills is one of the best ways to achieve a near-term beneficial impact in mitigating global climate change. The United States Environmental Protection Agency estimates that a landfill gas (LFG) project will capture roughly 60-90% of the methane emitted from the landfill, depending on system design and effectiveness. The captured methane can be then purified and used for industrial applications, as in this case the production of SCP. Utilizing methane in this way decreases its demand from fossil fuels which is its traditional source. #> 2 Municipal solid waste (MSW) landfills are one of the largest human-generated sources of methane emissions in the United States and other countries globally. Methane is believed to be a very potent greenhouse gas that is a key contributor to global climate change, over 21 times stronger than CO2. Methane also has a short (10-year) atmospheric life. Because methane is both potent and short-lived, reducing methane emissions from MSW landfills is one of the best ways to achieve a near-term beneficial impact in mitigating global climate change. The United States Environmental Protection Agency estimates that a landfill gas (LFG) project will capture roughly 60-90% of the methane emitted from the landfill, depending on system design and effectiveness. The captured methane can be then purified and used for industrial applications, as in this case the production of SCP. Utilizing methane in this way decreases its demand from fossil fuels which is its traditional source. #> 3 Municipal solid waste (MSW) landfills are one of the largest human-generated sources of methane emissions in the United States and other countries globally. Methane is believed to be a very potent greenhouse gas that is a key contributor to global climate change, over 21 times stronger than CO2. Methane also has a short (10-year) atmospheric life. Because methane is both potent and short-lived, reducing methane emissions from MSW landfills is one of the best ways to achieve a near-term beneficial impact in mitigating global climate change. The United States Environmental Protection Agency estimates that a landfill gas (LFG) project will capture roughly 60-90% of the methane emitted from the landfill, depending on system design and effectiveness. The captured methane can be then purified and used for industrial applications, as in this case the production of SCP. Utilizing methane in this way decreases its demand from fossil fuels which is its traditional source. #> 4 Municipal solid waste (MSW) landfills are one of the largest human-generated sources of methane emissions in the United States and other countries globally. Methane is believed to be a very potent greenhouse gas that is a key contributor to global climate change, over 21 times stronger than CO2. Methane also has a short (10-year) atmospheric life. Because methane is both potent and short-lived, reducing methane emissions from MSW landfills is one of the best ways to achieve a near-term beneficial impact in mitigating global climate change. The United States Environmental Protection Agency estimates that a landfill gas (LFG) project will capture roughly 60-90% of the methane emitted from the landfill, depending on system design and effectiveness. The captured methane can be then purified and used for industrial applications, as in this case the production of SCP. Utilizing methane in this way decreases its demand from fossil fuels which is its traditional source. #> 5 Municipal solid waste (MSW) landfills are one of the largest human-generated sources of methane emissions in the United States and other countries globally. Methane is believed to be a very potent greenhouse gas that is a key contributor to global climate change, over 21 times stronger than CO2. Methane also has a short (10-year) atmospheric life. Because methane is both potent and short-lived, reducing methane emissions from MSW landfills is one of the best ways to achieve a near-term beneficial impact in mitigating global climate change. The United States Environmental Protection Agency estimates that a landfill gas (LFG) project will capture roughly 60-90% of the methane emitted from the landfill, depending on system design and effectiveness. The captured methane can be then purified and used for industrial applications, as in this case the production of SCP. Utilizing methane in this way decreases its demand from fossil fuels which is its traditional source. #> 6 Municipal solid waste (MSW) landfills are one of the largest human-generated sources of methane emissions in the United States and other countries globally. Methane is believed to be a very potent greenhouse gas that is a key contributor to global climate change, over 21 times stronger than CO2. Methane also has a short (10-year) atmospheric life. Because methane is both potent and short-lived, reducing methane emissions from MSW landfills is one of the best ways to achieve a near-term beneficial impact in mitigating global climate change. The United States Environmental Protection Agency estimates that a landfill gas (LFG) project will capture roughly 60-90% of the methane emitted from the landfill, depending on system design and effectiveness. The captured methane can be then purified and used for industrial applications, as in this case the production of SCP. Utilizing methane in this way decreases its demand from fossil fuels which is its traditional source. #>                                                            creators #> 1 Babi, Deenesh, Price, Jason, Woodley, Prof. John, Babi, Price, NA #> 2 Babi, Deenesh, Price, Jason, Woodley, Prof. John, Babi, Price, NA #> 3 Babi, Deenesh, Price, Jason, Woodley, Prof. John, Babi, Price, NA #> 4 Babi, Deenesh, Price, Jason, Woodley, Prof. John, Babi, Price, NA #> 5 Babi, Deenesh, Price, Jason, Woodley, Prof. John, Babi, Price, NA #> 6 Babi, Deenesh, Price, Jason, Woodley, Prof. John, Babi, Price, NA #>   fundingReferences #> 1              NULL #> 2              NULL #> 3              NULL #> 4              NULL #> 5              NULL #> 6              NULL"},{"path":"https://docs.ropensci.org/ghql/articles/ghql.html","id":"example-countries-data","dir":"Articles","previous_headings":"","what":"Example: Countries Data","title":"Introduction to ghql","text":"public GraphQL API information countries, continents, languages. project uses Countries List provinces data sources, schema follows shape data, exceptions: Link GraphQL schema api Create new graphqlClient object Define Graphql Query ghql query class define query character string Inspecting schema define variable named list Making request, passing query variables. convert raw object structured json object Convert json data tibble object","code":"link <- 'https://countries.trevorblades.com/' con <- GraphqlClient$new(url = link) query <- ' query($code: ID!){   country(code: $code){     name     native     capital     currency     phone     languages{       code       name     }   } }' new <- Query$new()$query('link', query) new$link #>   #>   #> query($code: ID!){ #>   country(code: $code){ #>     name #>     native #>     capital #>     currency #>     phone #>     languages{ #>       code #>       name #>     } #>   } #> } variable <- list(   code = \"DE\" ) result <- con$exec(new$link, variables = variable) %>%    fromJSON(flatten = FALSE) result #> $data #> $data$country #> $data$country$name #> [1] \"Germany\" #>  #> $data$country$native #> [1] \"Deutschland\" #>  #> $data$country$capital #> [1] \"Berlin\" #>  #> $data$country$currency #> [1] \"EUR\" #>  #> $data$country$phone #> [1] \"49\" #>  #> $data$country$languages #>   code   name #> 1   de German country_data <- result$data$country %>%    as_tibble() country_data #> # A tibble: 1 x 6 #>   name    native      capital currency phone languages$code $name  #>   <chr>   <chr>       <chr>   <chr>    <chr> <chr>          <chr>  #> 1 Germany Deutschland Berlin  EUR      49    de             German"},{"path":"https://docs.ropensci.org/ghql/articles/ghql.html","id":"run-a-local-graphql-server","dir":"Articles","previous_headings":"","what":"run a local GraphQL server","title":"Introduction to ghql","text":"Copy server.js file package located inst/server.js somewhere machine. Can locate machine like system.file(\"js/server.js\", package = \"ghql\"). can run file ’s , . Make sure node installed. , see https://nodejs.org Run node server.js Navigate browser - go http://localhost:4000/graphql Back R, user URL connect","code":"(con <- GraphqlClient$new(\"http://localhost:4000/graphql\")) #> <ghql client> #>   url: http://localhost:4000/graphql xxx <- Query$new() xxx$query('query', '{   __schema {     queryType {       name,        fields {         name,         description       }     }   } }') con$exec(xxx$queries$query) #> $data #> $data$`__schema` #> $data$`__schema`$queryType #> $data$`__schema`$queryType$name #> [1] \"Query\" #>  #> $data$`__schema`$queryType$fields #>    name description #> 1 hello             #> 2  name"},{"path":"https://docs.ropensci.org/ghql/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Scott Chamberlain. Author. Mark Padgham. Author, maintainer.","code":""},{"path":"https://docs.ropensci.org/ghql/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chamberlain S, Padgham M (2024). ghql: General Purpose 'GraphQL' Client. R package version 0.1.1.099https://github.com/ropensci/ghql (devel) https://docs.ropensci.org/ghql/ (docs), https://github.com/ropensci/ghql (devel)https://docs.ropensci.org/ghql/ (docs).","code":"@Manual{,   title = {ghql: General Purpose 'GraphQL' Client},   author = {Scott Chamberlain and Mark Padgham},   year = {2024},   note = {R package version 0.1.1.099https://github.com/ropensci/ghql (devel) https://docs.ropensci.org/ghql/ (docs)},   url = {https://github.com/ropensci/ghql (devel) https://docs.ropensci.org/ghql/ (docs)}, }"},{"path":"https://docs.ropensci.org/ghql/index.html","id":"ghql","dir":"","previous_headings":"","what":"General Purpose GraphQL Client","title":"General Purpose GraphQL Client","text":"ghql - GraphQL client R GraphQL - https://graphql.org Examples GraphQL APIs: GitHub: https://docs.github.com/en/graphql/guides/introduction--graphql Opentargets: https://genetics-docs.opentargets.org/technical-pipeline/graphql-api Countries GraphQL API: https://github.com/trevorblades/countries GraphQL R packages: graphql - GraphQL query parser gqlr - GraphQL server query methods","code":""},{"path":"https://docs.ropensci.org/ghql/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"General Purpose GraphQL Client","text":"CRAN version Development version","code":"install.packages(\"ghql\") remotes::install_github(\"ropensci/ghql\") library(\"ghql\") library(\"jsonlite\") library(\"dplyr\")"},{"path":"https://docs.ropensci.org/ghql/index.html","id":"package-documentation","dir":"","previous_headings":"","what":"Package Documentation","title":"General Purpose GraphQL Client","text":"https://docs.ropensci.org/ghql/","code":""},{"path":"https://docs.ropensci.org/ghql/index.html","id":"meta","dir":"","previous_headings":"","what":"Meta","title":"General Purpose GraphQL Client","text":"Please note package released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/ghql/reference/Fragment.html","id":null,"dir":"Reference","previous_headings":"","what":"Fragment — Fragment","title":"Fragment — Fragment","text":"ghql fragment class","code":""},{"path":"https://docs.ropensci.org/ghql/reference/Fragment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fragment — Fragment","text":"`Fragment` class (R6 class)","code":""},{"path":"https://docs.ropensci.org/ghql/reference/Fragment.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Fragment — Fragment","text":"fragments (list) list fragments","code":""},{"path":[]},{"path":"https://docs.ropensci.org/ghql/reference/Fragment.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Fragment — Fragment","text":"Fragment$print() Fragment$fragment()","code":""},{"path":"https://docs.ropensci.org/ghql/reference/Fragment.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Fragment — Fragment","text":"print method `Fragment` class","code":""},{"path":"https://docs.ropensci.org/ghql/reference/Fragment.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fragment — Fragment","text":"","code":"Fragment$print(x, ...)"},{"path":"https://docs.ropensci.org/ghql/reference/Fragment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fragment — Fragment","text":"x self ... ignored","code":""},{"path":"https://docs.ropensci.org/ghql/reference/Fragment.html","id":"method-fragment-","dir":"Reference","previous_headings":"","what":"Method fragment()","title":"Fragment — Fragment","text":"create fragment name","code":""},{"path":"https://docs.ropensci.org/ghql/reference/Fragment.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Fragment — Fragment","text":"","code":"Fragment$fragment(name, x)"},{"path":"https://docs.ropensci.org/ghql/reference/Fragment.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fragment — Fragment","text":"name (character) fragment name x (character) fragment","code":""},{"path":"https://docs.ropensci.org/ghql/reference/Fragment.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Fragment — Fragment","text":"nothing returned; sets fragments internally","code":""},{"path":"https://docs.ropensci.org/ghql/reference/Fragment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fragment — Fragment","text":"","code":"# make a fragment class frag <- Fragment$new()  # define a fragment frag$fragment('Watchers', '   fragment on Repository {     watchers(first: 3) {       edges {         node {           name        }     }   } }')  # define another fragment frag$fragment('Stargazers', '   fragment on Repository {     stargazers(first: 3) {       edges {         node {           name        }     }   } }') frag #> <ghql: fragment> #>   fragments: #>     Watchers  #>     Stargazers  frag$fragments #> $Watchers #> fragment on Repository { #>     watchers(first: 3) { #>       edges { #>         node { #>           name #>        } #>     } #>   } #> }  #>  #> $Stargazers #> fragment on Repository { #>     stargazers(first: 3) { #>       edges { #>         node { #>           name #>        } #>     } #>   } #> }  #>  frag$fragments$Watchers #> fragment on Repository { #>     watchers(first: 3) { #>       edges { #>         node { #>           name #>        } #>     } #>   } #> }  frag$fragments$Stargazers #> fragment on Repository { #>     stargazers(first: 3) { #>       edges { #>         node { #>           name #>        } #>     } #>   } #> }"},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":null,"dir":"Reference","previous_headings":"","what":"GraphqlClient — GraphqlClient","title":"GraphqlClient — GraphqlClient","text":"R6 class constructing GraphQL queries","code":""},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GraphqlClient — GraphqlClient","text":"`GraphqlClient` class (R6 class)","code":""},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"GraphqlClient — GraphqlClient","text":"url (character) list fragments headers list named headers schema holds schema result holds result http request fragments (list) list fragments","code":""},{"path":[]},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"GraphqlClient — GraphqlClient","text":"GraphqlClient$new() GraphqlClient$print() GraphqlClient$ping() GraphqlClient$load_schema() GraphqlClient$dump_schema() GraphqlClient$schema2json() GraphqlClient$fragment() GraphqlClient$exec() GraphqlClient$prep_query()","code":""},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"GraphqlClient — GraphqlClient","text":"Create new `GraphqlClient` object","code":""},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GraphqlClient — GraphqlClient","text":"","code":"GraphqlClient$new(url, headers)"},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GraphqlClient — GraphqlClient","text":"url (character) URL GraphQL schema headers acceptable headers, named list. See examples","code":""},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"GraphqlClient — GraphqlClient","text":"new `GraphqlClient` object","code":""},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"GraphqlClient — GraphqlClient","text":"print method `GraphqlClient` class","code":""},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"GraphqlClient — GraphqlClient","text":"","code":"GraphqlClient$print(x, ...)"},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"GraphqlClient — GraphqlClient","text":"x self ... ignored","code":""},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"method-ping-","dir":"Reference","previous_headings":"","what":"Method ping()","title":"GraphqlClient — GraphqlClient","text":"ping GraphQL server","code":""},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"GraphqlClient — GraphqlClient","text":"","code":"GraphqlClient$ping(...)"},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"GraphqlClient — GraphqlClient","text":"... curl options passed [crul::verb-HEAD]","code":""},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"GraphqlClient — GraphqlClient","text":"`TRUE` successful response, `FALSE` otherwise","code":""},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"method-load-schema-","dir":"Reference","previous_headings":"","what":"Method load_schema()","title":"GraphqlClient — GraphqlClient","text":"load schema, URL local file","code":""},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"GraphqlClient — GraphqlClient","text":"","code":"GraphqlClient$load_schema(schema_url = NULL, schema_file = NULL, ...)"},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"GraphqlClient — GraphqlClient","text":"schema_url (character) url schema file schema_file (character) path schema file ... curl options passed [crul::verb-GET]","code":""},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"GraphqlClient — GraphqlClient","text":"nothing, loads schema `$schema` slot","code":""},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"method-dump-schema-","dir":"Reference","previous_headings":"","what":"Method dump_schema()","title":"GraphqlClient — GraphqlClient","text":"dump schema local file","code":""},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"GraphqlClient — GraphqlClient","text":"","code":"GraphqlClient$dump_schema(file)"},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"GraphqlClient — GraphqlClient","text":"file (character) path file","code":""},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"GraphqlClient — GraphqlClient","text":"nothing, writes schema `file`","code":""},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"method-schema-json-","dir":"Reference","previous_headings":"","what":"Method schema2json()","title":"GraphqlClient — GraphqlClient","text":"convert schema JSON","code":""},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"GraphqlClient — GraphqlClient","text":"","code":"GraphqlClient$schema2json(...)"},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"GraphqlClient — GraphqlClient","text":"... options passed [jsonlite::toJSON()]","code":""},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"GraphqlClient — GraphqlClient","text":"json","code":""},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"method-fragment-","dir":"Reference","previous_headings":"","what":"Method fragment()","title":"GraphqlClient — GraphqlClient","text":"load schema, URL local file","code":""},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"GraphqlClient — GraphqlClient","text":"","code":"GraphqlClient$fragment(name, x)"},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"GraphqlClient — GraphqlClient","text":"name (character) fragment name x (character) fragment","code":""},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"GraphqlClient — GraphqlClient","text":"nothing returned; sets fragments internally","code":""},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"method-exec-","dir":"Reference","previous_headings":"","what":"Method exec()","title":"GraphqlClient — GraphqlClient","text":"execute query","code":""},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"GraphqlClient — GraphqlClient","text":"","code":"GraphqlClient$exec(   query,   variables,   encoding = \"UTF-8\",   response_headers = FALSE,   ... )"},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"GraphqlClient — GraphqlClient","text":"query (character) query, class `query` `fragment` variables (list) named list query variables values encoding (character) encoding use parse response. passed [crul::HttpResponse] `$parse()` method. default: \"UTF-8\" response_headers `TRUE`, include response headers attribute return object. ... curl options passed [crul::verb-POST]","code":""},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"GraphqlClient — GraphqlClient","text":"character string response, successful","code":""},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"method-prep-query-","dir":"Reference","previous_headings":"","what":"Method prep_query()","title":"GraphqlClient — GraphqlClient","text":"used right now","code":""},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"GraphqlClient — GraphqlClient","text":"","code":"GraphqlClient$prep_query(query)"},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"GraphqlClient — GraphqlClient","text":"query (character) query, class `query` `fragment`","code":""},{"path":"https://docs.ropensci.org/ghql/reference/GraphqlClient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GraphqlClient — GraphqlClient","text":"","code":"x <- GraphqlClient$new() x #> <ghql client> #>   url:   if (FALSE) { # make a client token <- Sys.getenv(\"GITHUB_TOKEN\") cli <- GraphqlClient$new(   url = \"https://api.github.com/graphql\",   headers = list(Authorization = paste0(\"Bearer \", token)) )  # if the GraphQL server has a schema, you can load it cli$load_schema()  # dump schema to local file f <- tempfile(fileext = \".json\") cli$dump_schema(file = f) readLines(f) jsonlite::fromJSON(readLines(f))  # after dumping to file, you can later read schema from file for faster loading rm(cli) cli <- GraphqlClient$new(   url = \"https://api.github.com/graphql\",   headers = list(Authorization = paste0(\"Bearer \", token)) ) cli$load_schema(schema_file = f)  # variables cli$url cli$schema cli$schema$data cli$schema$data$`__schema` cli$schema$data$`__schema`$queryType cli$schema$data$`__schema`$mutationType cli$schema$data$`__schema`$subscriptionType head(cli$schema$data$`__schema`$types) cli$schema$data$`__schema`$directives   # methods ## ping - hopefully you get TRUE cli$ping()  ## dump schema cli$schema2json()   ## define query ### creat a query class first qry <- Query$new() ## another qry$query('repos', '{   viewer {     repositories(last: 10, isFork: false, privacy: PUBLIC) {       edges {         node {           isPrivate           id           name         }       }     }   } }') qry qry$queries qry$queries$repos ### execute the query cli$exec(qry$queries$repos)   # query with a fragment ### define query without fragment, but referring to it qry <- Query$new() qry$query('queryfrag', '{   ropensci: repositoryOwner(login:\"ropensci\") {     repositories(first: 3) {       edges {         node {           ...Watchers         }       }     }   }   ropenscilabs: repositoryOwner(login:\"ropenscilabs\") {     repositories(first: 3) {       edges {         node {           ...Watchers         }       }     }   } }')  ### define a fragment frag <- Fragment$new() frag$fragment('Watchers', '   fragment on Repository {     watchers(first: 3) {       edges {         node {           name        }     }   } }') frag$fragments frag$fragments$Watchers  ### add the fragment to the query 'queryfrag' qry$add_fragment('queryfrag', frag$fragments$Watchers) qry qry$queries$queryfrag  ### execute query: we'll hook together the query and your fragment internally cli$exec(qry$queries$queryfrag) }"},{"path":"https://docs.ropensci.org/ghql/reference/Query.html","id":null,"dir":"Reference","previous_headings":"","what":"Query — Query","title":"Query — Query","text":"ghql query class","code":""},{"path":"https://docs.ropensci.org/ghql/reference/Query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query — Query","text":"`Query` class (R6 class)","code":""},{"path":"https://docs.ropensci.org/ghql/reference/Query.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Query — Query","text":"run internal method `check_query()` runs public method `parse2json()` - query pass libgraphqlparser parser, return error message","code":""},{"path":"https://docs.ropensci.org/ghql/reference/Query.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Query — Query","text":"queries (list) list queries","code":""},{"path":[]},{"path":"https://docs.ropensci.org/ghql/reference/Query.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Query — Query","text":"Query$print() Query$query() Query$add_fragment() Query$parse2json()","code":""},{"path":"https://docs.ropensci.org/ghql/reference/Query.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Query — Query","text":"print method `Query` class","code":""},{"path":"https://docs.ropensci.org/ghql/reference/Query.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query — Query","text":"","code":"Query$print(x, ...)"},{"path":"https://docs.ropensci.org/ghql/reference/Query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query — Query","text":"x self ... ignored","code":""},{"path":"https://docs.ropensci.org/ghql/reference/Query.html","id":"method-query-","dir":"Reference","previous_headings":"","what":"Method query()","title":"Query — Query","text":"define query character string","code":""},{"path":"https://docs.ropensci.org/ghql/reference/Query.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Query — Query","text":"","code":"Query$query(name, x)"},{"path":"https://docs.ropensci.org/ghql/reference/Query.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query — Query","text":"name (character) name query x (character) query","code":""},{"path":"https://docs.ropensci.org/ghql/reference/Query.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Query — Query","text":"nothing returned; sets query `name` internally","code":""},{"path":"https://docs.ropensci.org/ghql/reference/Query.html","id":"method-add-fragment-","dir":"Reference","previous_headings":"","what":"Method add_fragment()","title":"Query — Query","text":"add fragment query","code":""},{"path":"https://docs.ropensci.org/ghql/reference/Query.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Query — Query","text":"","code":"Query$add_fragment(query_name, fragment)"},{"path":"https://docs.ropensci.org/ghql/reference/Query.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query — Query","text":"query_name (character) query name add fragment fragment (character) fragment ","code":""},{"path":"https://docs.ropensci.org/ghql/reference/Query.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Query — Query","text":"nothing returned; sets fragment query","code":""},{"path":"https://docs.ropensci.org/ghql/reference/Query.html","id":"method-parse-json-","dir":"Reference","previous_headings":"","what":"Method parse2json()","title":"Query — Query","text":"parse query string libgraphqlparser get back JSON","code":""},{"path":"https://docs.ropensci.org/ghql/reference/Query.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Query — Query","text":"","code":"Query$parse2json(query, parse_schema = FALSE)"},{"path":"https://docs.ropensci.org/ghql/reference/Query.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query — Query","text":"query (character) query parse parse_schema (logical) enable schema definition parsing? default: `FAlSE`","code":""},{"path":"https://docs.ropensci.org/ghql/reference/Query.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Query — Query","text":"adf","code":""},{"path":"https://docs.ropensci.org/ghql/reference/Query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query — Query","text":"","code":"# make a client qry <- Query$new()  ## define query qry$query('query2', '{   viewer {     repositories(last: 10, isFork: false, privacy: PUBLIC) {       edges {         node {           isPrivate           id           name         }       }     }   } }') qry #> <ghql: query> #>   queries: #>     query2     qry$queries #> $query2 #>   #>  { #>   viewer { #>     repositories(last: 10, isFork: false, privacy: PUBLIC) { #>       edges { #>         node { #>           isPrivate #>           id #>           name #>         } #>       } #>     } #>   } #> }  #>  qry$queries$query2 #>   #>  { #>   viewer { #>     repositories(last: 10, isFork: false, privacy: PUBLIC) { #>       edges { #>         node { #>           isPrivate #>           id #>           name #>         } #>       } #>     } #>   } #> }   # fragments ## by hand qry$query('querywithfrag', '{   ropensci: repositoryOwner(login:\"ropensci\") {     repositories(first: 3) {       edges {         node {           ...Watchers         }       }     }   }   ropenscilabs: repositoryOwner(login:\"ropenscilabs\") {     repositories(first: 3) {       edges {         node {           ...Watchers         }       }     }   } } fragment Watchers on Repository {   watchers(first: 3) {     edges {       node {         name       }     }   } }') qry #> <ghql: query> #>   queries: #>     query2     #>     querywithfrag     qry$queries #> $query2 #>   #>  { #>   viewer { #>     repositories(last: 10, isFork: false, privacy: PUBLIC) { #>       edges { #>         node { #>           isPrivate #>           id #>           name #>         } #>       } #>     } #>   } #> }  #>  #> $querywithfrag #>   #>  { #>   ropensci: repositoryOwner(login:\"ropensci\") { #>     repositories(first: 3) { #>       edges { #>         node { #>           ...Watchers #>         } #>       } #>     } #>   } #>   ropenscilabs: repositoryOwner(login:\"ropenscilabs\") { #>     repositories(first: 3) { #>       edges { #>         node { #>           ...Watchers #>         } #>       } #>     } #>   } #> } #> fragment Watchers on Repository { #>   watchers(first: 3) { #>     edges { #>       node { #>         name #>       } #>     } #>   } #> }  #>  qry$queries$querywithfrag #>   #>  { #>   ropensci: repositoryOwner(login:\"ropensci\") { #>     repositories(first: 3) { #>       edges { #>         node { #>           ...Watchers #>         } #>       } #>     } #>   } #>   ropenscilabs: repositoryOwner(login:\"ropenscilabs\") { #>     repositories(first: 3) { #>       edges { #>         node { #>           ...Watchers #>         } #>       } #>     } #>   } #> } #> fragment Watchers on Repository { #>   watchers(first: 3) { #>     edges { #>       node { #>         name #>       } #>     } #>   } #> }    if (FALSE) { token <- Sys.getenv(\"GITHUB_TOKEN\") con <- GraphqlClient$new(   url = \"https://api.github.com/graphql\",   headers = list(Authorization = paste0(\"Bearer \", token)) ) jsonlite::fromJSON(con$exec(qry$queries$querywithfrag))  ## use Fragment class fragments generator ### define query without fragment, but referring to it qry$query('queryfrag', '{   ropensci: repositoryOwner(login:\"ropensci\") {     repositories(first: 3) {       edges {         node {           ...Watchers         }       }     }   }   ropenscilabs: repositoryOwner(login:\"ropenscilabs\") {     repositories(first: 3) {       edges {         node {           ...Watchers         }       }     }   } }')  ### define a fragment, and use it later frag <- Fragment$new() frag$fragment('Watchers', '   fragment on Repository {     watchers(first: 3) {       edges {         node {           name        }     }   } }') frag$fragments frag$fragments$Watchers  ### add the fragment to the query 'queryfrag' qry$add_fragment('queryfrag', frag$fragments$Watchers) qry qry$queries qry$queries$queryfrag }"},{"path":"https://docs.ropensci.org/ghql/reference/ghql-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ghql — ghql-package","title":"ghql — ghql-package","text":"General purpose GraphQL client","code":""},{"path":"https://docs.ropensci.org/ghql/reference/ghql-package.html","id":"ghql-api","dir":"Reference","previous_headings":"","what":"ghql API","title":"ghql — ghql-package","text":"main interface package [GraphqlClient], produces client (R6 class) various methods interacting GraphQL server. [GraphqlClient] also accepts various input parameters set base URL, headers required, usually required set things needed connect GraphQL service. [Query] interface creating GraphQL queries, works together [GraphqlClient] [Fragment] interface creating GraphQL fragments, works together [GraphqlClient]","code":""},{"path":"https://docs.ropensci.org/ghql/reference/ghql-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ghql — ghql-package","text":"Scott Chamberlain myrmecocystus@gmail.com","code":""},{"path":"https://docs.ropensci.org/ghql/news/index.html","id":"ghql-010","dir":"Changelog","previous_headings":"","what":"ghql 0.1.0","title":"ghql 0.1.0","text":"CRAN release: 2020-03-04","code":""},{"path":"https://docs.ropensci.org/ghql/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"ghql 0.1.0","text":"Released CRAN","code":""}]
